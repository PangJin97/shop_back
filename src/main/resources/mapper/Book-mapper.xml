<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<!-- namespace에는 xml파일과 연결할 Mapper interface 파일명을 패키지를 포함하여 적어주세요 -->

<!--BOOK_CATEGORY, BOOK 두 테이블과 관련되 쿼리는 여기서 작성-->
<mapper namespace="com.green.book_shop.book.mapper.BookMapper">

    <resultMap id="book" type="BookDTO">
        <result column="BOOK_CODE"  property="bookCode" />
        <result column="BOOK_NAME"  property="bookName" />
        <result column="BOOK_PRICE" property="bookPrice" />
        <result column="PUBLISHER"  property="publisher" />
        <result column="BOOK_INFO"  property="bookInfo" />
        <result column="REG_DATE"   property="regDate" />
        <result column="BOOK_STOCK" property="bookStock" />
        <result column="CATE_CODE"  property="cateCode" />
    </resultMap>

    <select id="getBooks" resultMap="book">
        SELECT BOOK_NAME, BOOK_PRICE, BOOK_CODE
        FROM BOOK;
    </select>

    <!--resultMap : 쿼리 결과 데이터를 자바로 가져올 형태를 구성-->
    <resultMap id="bookCategory" type="BookCategoryDTO">
        <id column="CATE_CODE" property="cateCode" />
        <result column="CATE_NAME" property="cateName" />
    </resultMap>

    <!--도서 등록-->
    <insert id="insertItem">
        INSERT INTO BOOK(
        BOOK_CODE
        ,BOOK_NAME
        ,BOOK_PRICE
        ,PUBLISHER
        ,BOOK_INFO
        ,BOOK_STOCK
        ,CATE_CODE
        )VALUES(
        #{bookCode}
        ,#{bookName}
        ,#{bookPrice}
        ,#{publisher}
        ,#{bookInfo}
        ,#{bookStock}
        ,#{cateCode}
        )
    </insert>
    <!--BOOK_CODE를 지정해주기 위해 추가-->

    <!--도서 이미지 등록-->
    <insert id="insertImgs">
        INSERT INTO book_img (ORIGIN_FILE_NAME, ATTACHED_FILE_NAME, IS_MAIN, BOOK_CODE)
        VALUES
        <!--빈값 채우려면 imgDTO가 2개 필요하다-->
        <!--즉 List자료형으로-->

        <!-- ('aaa.jpg','1111-2222.jpg','Y', 1),
        ('aaa.jpg','1111-2222.jpg','N', 1)-->
        <!--이런식으로 파일을 첨부할때맏 넣어줘야함.. 반복!-->

        <!--첨부할 파일 갯수만큼 반복해서 insert-->
        <!--collection : 반복을 돌릴 데이터(배열, 리스트)-->
        <!--collection의 작성한 글자는 쿼리의 빈값을 채우기 위해 가져온 DTO 객체의 GETTER를 호출하여 해석한다-->
        <!--item : 하나씩 뺀 데이터-->
        <!--separator : 반복문이 한 번 실행될때마다 추가할 내용. 단, 마지막 반복시에는 적용하지 않는다.-->
        <foreach collection="imgList" item="img" separator=",">
            <!--bookDTO.getImgList()-->
            <!--bookDTO.getImgList()안에는 mainImgDTO, subImgDTO-->
            <!--img는 각각 mainImgDTO, subImgDTO를 의미 -->
            (#{img.originFileName},#{img.attachedFileName},#{img.isMain},#{img.bookCode})
        </foreach>

    </insert>

    <!--도서를 등록할때 BOOK_CODE를 조회-->
    <select id="getNextBookCode" resultType="int">
        SELECT IFNULL(MAX(BOOK_CODE),0)+1 FROM book;
        <!--데이터가 아예 없으면 null이 되니 null을 0으로 바꿔주기-->
    </select>

    <!--도서 카테고리 목록 조회-->
    <select id="getCateGory" resultMap="bookCategory">
        SELECT CATE_CODE
        ,CATE_NAME
        FROM BOOK_CATEGORY
        ORDER BY CATE_CODE
    </select>

    <!--카테고리명 중복확인-->
    <select id="isUsableCateName" resultType="String">
        SELECT CATE_NAME
        FROM BOOK_CATEGORY
        WHERE CATE_NAME = #{cateName}
    </select>

    <!--카테고리 등록-->
    <insert id="insertCate">
        INSERT INTO BOOK_CATEGORY(
            CATE_NAME
        )VALUES(
            #{cateName}
        )
    </insert>

    <!--카테고리 수정-->
    <update id="updateCate">
        UPDATE BOOK_CATEGORY
            SET CATE_NAME = #{cateName}
        WHERE CATE_CODE = #{cateCode}
    </update>


    <!--카테고리 삭제-->
    <delete id="deleteCate">
        DELETE FROM BOOK_CATEGORY
        WHERE CATE_CODE = #{cateCode}
    </delete>

</mapper>































